#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 58)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 56)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 57)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 57)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 58)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos - 45)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 45)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 60)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 63)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 63)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 63)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 63)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 64)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 64)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 64)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 71)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 73)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 73)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 73)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 73)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 83)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 84)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 95)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 96)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 96)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 97)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 97)) * yMult)] = color;
}