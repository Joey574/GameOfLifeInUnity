#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 62)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 49)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 51)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 99)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 101)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 49)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 50)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 99)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 100)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 50)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 100)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 113)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 112)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 112)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 113)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 114)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 45)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 45)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 90)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 90)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 91)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 91)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 93)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 93)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 93)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 93)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 94)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 94)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 96)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 97)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 76)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 112)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 113)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 113)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 113)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 114)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 114)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 114)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 114)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 114)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 115)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 115)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 115)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 115)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 115)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 116)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 116)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 116)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 116)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 117)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 117)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 117)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 117)) * yMult)] = color;
	Result[int2((xPos + 50)) * xMult), (yPos - 117)) * yMult)] = color;
	Result[int2((xPos + 51)) * xMult), (yPos - 117)) * yMult)] = color;
	Result[int2((xPos + 52)) * xMult), (yPos - 117)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 117)) * yMult)] = color;
	Result[int2((xPos + 66)) * xMult), (yPos - 117)) * yMult)] = color;
	Result[int2((xPos + 67)) * xMult), (yPos - 117)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 118)) * yMult)] = color;
	Result[int2((xPos + 51)) * xMult), (yPos - 118)) * yMult)] = color;
	Result[int2((xPos + 68)) * xMult), (yPos - 118)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 119)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 119)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 119)) * yMult)] = color;
	Result[int2((xPos + 51)) * xMult), (yPos - 119)) * yMult)] = color;
	Result[int2((xPos + 52)) * xMult), (yPos - 119)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 119)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 119)) * yMult)] = color;
	Result[int2((xPos + 68)) * xMult), (yPos - 119)) * yMult)] = color;
	Result[int2((xPos + 66)) * xMult), (yPos - 120)) * yMult)] = color;
	Result[int2((xPos + 67)) * xMult), (yPos - 120)) * yMult)] = color;
	Result[int2((xPos + 66)) * xMult), (yPos - 121)) * yMult)] = color;
	Result[int2((xPos + 67)) * xMult), (yPos - 121)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 122)) * yMult)] = color;
	Result[int2((xPos + 68)) * xMult), (yPos - 122)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 123)) * yMult)] = color;
	Result[int2((xPos + 67)) * xMult), (yPos - 124)) * yMult)] = color;
	Result[int2((xPos + 68)) * xMult), (yPos - 124)) * yMult)] = color;
}