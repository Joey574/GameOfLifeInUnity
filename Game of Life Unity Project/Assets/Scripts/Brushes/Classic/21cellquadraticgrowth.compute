#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 1)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 221)) * xMult), (yPos - 124)) * yMult)] = color;
	Result[int2((xPos + 221)) * xMult), (yPos - 125)) * yMult)] = color;
	Result[int2((xPos + 222)) * xMult), (yPos - 125)) * yMult)] = color;
	Result[int2((xPos + 261)) * xMult), (yPos - 144)) * yMult)] = color;
	Result[int2((xPos + 263)) * xMult), (yPos - 144)) * yMult)] = color;
	Result[int2((xPos + 260)) * xMult), (yPos - 145)) * yMult)] = color;
	Result[int2((xPos + 261)) * xMult), (yPos - 146)) * yMult)] = color;
	Result[int2((xPos + 264)) * xMult), (yPos - 146)) * yMult)] = color;
	Result[int2((xPos + 263)) * xMult), (yPos - 147)) * yMult)] = color;
	Result[int2((xPos + 264)) * xMult), (yPos - 147)) * yMult)] = color;
	Result[int2((xPos + 265)) * xMult), (yPos - 147)) * yMult)] = color;
	Result[int2((xPos + 143)) * xMult), (yPos - 161)) * yMult)] = color;
	Result[int2((xPos + 144)) * xMult), (yPos - 161)) * yMult)] = color;
	Result[int2((xPos + 145)) * xMult), (yPos - 161)) * yMult)] = color;
	Result[int2((xPos + 146)) * xMult), (yPos - 162)) * yMult)] = color;
	Result[int2((xPos + 146)) * xMult), (yPos - 163)) * yMult)] = color;
}