#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 168)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 167)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 167)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 168)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 169)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 143)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 144)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 144)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 144)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 145)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 207)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 208)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 208)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 209)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 210)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 210)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 210)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 211)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 212)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 213)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 214)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 215)) * yMult)] = color;
}