#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 51)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 49)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 50)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 50)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 51)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 30)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 31)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 31)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 42)) * yMult)] = color;
}