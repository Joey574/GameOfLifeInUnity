#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 62)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 91)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 92)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 92)) * xMult), (yPos - 29)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 29)) * yMult)] = color;
	Result[int2((xPos + 92)) * xMult), (yPos - 30)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 30)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 31)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 35)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 35)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 35)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 36)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 101)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 102)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 98)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 100)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 103)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 98)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 100)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 102)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 99)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 103)) * xMult), (yPos - 41)) * yMult)] = color;
}