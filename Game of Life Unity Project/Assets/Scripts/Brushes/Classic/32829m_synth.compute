#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 85)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 79)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 84)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 84)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 85)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 123)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 124)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 125)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 86)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 87)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 88)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 126)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 126)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 126)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 29)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 29)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 29)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 29)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 29)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 30)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 30)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 30)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 30)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 30)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 31)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 31)) * yMult)] = color;
	Result[int2((xPos + 132)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 133)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 134)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 140)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 141)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 142)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 145)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 146)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 142)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 144)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 145)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 141)) * xMult), (yPos - 34)) * yMult)] = color;
	Result[int2((xPos + 146)) * xMult), (yPos - 34)) * yMult)] = color;
}