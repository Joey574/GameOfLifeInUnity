#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 70)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 72)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 70)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 71)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 71)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 58)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 59)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 60)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 60)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 60)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 64)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 64)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 65)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 65)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 71)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 71)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 71)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 71)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 72)) * yMult)] = color;
}