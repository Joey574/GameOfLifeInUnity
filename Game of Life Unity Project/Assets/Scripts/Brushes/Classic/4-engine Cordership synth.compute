#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 39)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 77)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 77)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 79)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 77)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 78)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 71)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 69)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 70)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 70)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 71)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 34)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 34)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 59)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 60)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 60)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 129)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos + 128)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos + 129)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 71)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 71)) * yMult)] = color;
	Result[int2((xPos + 128)) * xMult), (yPos - 71)) * yMult)] = color;
	Result[int2((xPos + 130)) * xMult), (yPos - 71)) * yMult)] = color;
	Result[int2((xPos + 60)) * xMult), (yPos - 73)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 73)) * yMult)] = color;
	Result[int2((xPos + 59)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 60)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 81)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 81)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 70)) * xMult), (yPos - 128)) * yMult)] = color;
	Result[int2((xPos + 71)) * xMult), (yPos - 128)) * yMult)] = color;
	Result[int2((xPos + 69)) * xMult), (yPos - 129)) * yMult)] = color;
	Result[int2((xPos + 70)) * xMult), (yPos - 129)) * yMult)] = color;
	Result[int2((xPos + 71)) * xMult), (yPos - 130)) * yMult)] = color;
}