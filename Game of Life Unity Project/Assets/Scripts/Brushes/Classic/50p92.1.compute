#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2(xPos + (25 * xMult), yPos)] = color;
	Result[int2(xPos + (26 * xMult), yPos)] = color;
	Result[int2(xPos + (32 * xMult), yPos)] = color;
	Result[int2(xPos + (33 * xMult), yPos)] = color;
	Result[int2(xPos + (25 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (26 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (32 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (33 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (27 * xMult), yPos - (13 * yMult))] = color;
	Result[int2(xPos + (28 * xMult), yPos - (13 * yMult))] = color;
	Result[int2(xPos + (30 * xMult), yPos - (13 * yMult))] = color;
	Result[int2(xPos + (31 * xMult), yPos - (13 * yMult))] = color;
	Result[int2(xPos + (26 * xMult), yPos - (14 * yMult))] = color;
	Result[int2(xPos + (32 * xMult), yPos - (14 * yMult))] = color;
	Result[int2(xPos + (25 * xMult), yPos - (16 * yMult))] = color;
	Result[int2(xPos + (33 * xMult), yPos - (16 * yMult))] = color;
	Result[int2(xPos + (25 * xMult), yPos - (17 * yMult))] = color;
	Result[int2(xPos + (28 * xMult), yPos - (17 * yMult))] = color;
	Result[int2(xPos + (30 * xMult), yPos - (17 * yMult))] = color;
	Result[int2(xPos + (33 * xMult), yPos - (17 * yMult))] = color;
	Result[int2(xPos + (25 * xMult), yPos - (18 * yMult))] = color;
	Result[int2(xPos + (26 * xMult), yPos - (18 * yMult))] = color;
	Result[int2(xPos + (27 * xMult), yPos - (18 * yMult))] = color;
	Result[int2(xPos + (31 * xMult), yPos - (18 * yMult))] = color;
	Result[int2(xPos + (32 * xMult), yPos - (18 * yMult))] = color;
	Result[int2(xPos + (33 * xMult), yPos - (18 * yMult))] = color;
	Result[int2(xPos + (17 * xMult), yPos - (21 * yMult))] = color;
	Result[int2(xPos + (18 * xMult), yPos - (21 * yMult))] = color;
	Result[int2(xPos, yPos - (22 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (22 * yMult))] = color;
	Result[int2(xPos + (17 * xMult), yPos - (22 * yMult))] = color;
	Result[int2(xPos + (19 * xMult), yPos - (22 * yMult))] = color;
	Result[int2(xPos, yPos - (23 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (23 * yMult))] = color;
	Result[int2(xPos + (19 * xMult), yPos - (23 * yMult))] = color;
	Result[int2(xPos + (17 * xMult), yPos - (24 * yMult))] = color;
	Result[int2(xPos + (18 * xMult), yPos - (24 * yMult))] = color;
	Result[int2(xPos + (19 * xMult), yPos - (24 * yMult))] = color;
	Result[int2(xPos + (17 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (18 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (19 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos, yPos - (29 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos + (19 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos, yPos - (30 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (30 * yMult))] = color;
	Result[int2(xPos + (17 * xMult), yPos - (30 * yMult))] = color;
	Result[int2(xPos + (19 * xMult), yPos - (30 * yMult))] = color;
	Result[int2(xPos + (17 * xMult), yPos - (31 * yMult))] = color;
	Result[int2(xPos + (18 * xMult), yPos - (31 * yMult))] = color;
}