#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 58)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 60)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 59)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 60)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 59)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 128)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 127)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 127)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 128)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 129)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 66)) * xMult), (yPos - 31)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 66)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 66)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 111)) * xMult), (yPos - 34)) * yMult)] = color;
	Result[int2((xPos + 113)) * xMult), (yPos - 34)) * yMult)] = color;
	Result[int2((xPos + 111)) * xMult), (yPos - 35)) * yMult)] = color;
	Result[int2((xPos + 112)) * xMult), (yPos - 35)) * yMult)] = color;
	Result[int2((xPos + 112)) * xMult), (yPos - 36)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 70)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 63)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 63)) * yMult)] = color;
	Result[int2((xPos + 68)) * xMult), (yPos - 63)) * yMult)] = color;
	Result[int2((xPos + 70)) * xMult), (yPos - 63)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 64)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 64)) * yMult)] = color;
	Result[int2((xPos + 69)) * xMult), (yPos - 64)) * yMult)] = color;
	Result[int2((xPos + 70)) * xMult), (yPos - 64)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 65)) * yMult)] = color;
	Result[int2((xPos + 85)) * xMult), (yPos - 65)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 66)) * yMult)] = color;
	Result[int2((xPos + 84)) * xMult), (yPos - 66)) * yMult)] = color;
	Result[int2((xPos + 84)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 131)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 132)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 131)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 133)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 131)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 73)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 87)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 88)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 86)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 87)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 115)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 116)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 88)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 114)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 115)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 116)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 87)) * yMult)] = color;
	Result[int2((xPos + 66)) * xMult), (yPos - 87)) * yMult)] = color;
	Result[int2((xPos + 66)) * xMult), (yPos - 88)) * yMult)] = color;
	Result[int2((xPos + 67)) * xMult), (yPos - 88)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 89)) * yMult)] = color;
	Result[int2((xPos + 76)) * xMult), (yPos - 90)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 91)) * yMult)] = color;
	Result[int2((xPos + 76)) * xMult), (yPos - 91)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 77)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 169)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 168)) * xMult), (yPos - 110)) * yMult)] = color;
	Result[int2((xPos + 169)) * xMult), (yPos - 110)) * yMult)] = color;
	Result[int2((xPos + 168)) * xMult), (yPos - 111)) * yMult)] = color;
	Result[int2((xPos + 170)) * xMult), (yPos - 111)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 115)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 115)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 116)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 116)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 117)) * yMult)] = color;
	Result[int2((xPos + 77)) * xMult), (yPos - 118)) * yMult)] = color;
	Result[int2((xPos + 76)) * xMult), (yPos - 119)) * yMult)] = color;
	Result[int2((xPos + 77)) * xMult), (yPos - 119)) * yMult)] = color;
	Result[int2((xPos + 76)) * xMult), (yPos - 120)) * yMult)] = color;
	Result[int2((xPos + 78)) * xMult), (yPos - 120)) * yMult)] = color;
	Result[int2((xPos + 120)) * xMult), (yPos - 124)) * yMult)] = color;
	Result[int2((xPos + 121)) * xMult), (yPos - 124)) * yMult)] = color;
	Result[int2((xPos + 122)) * xMult), (yPos - 124)) * yMult)] = color;
	Result[int2((xPos + 120)) * xMult), (yPos - 125)) * yMult)] = color;
	Result[int2((xPos + 121)) * xMult), (yPos - 126)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 131)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 131)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 132)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 132)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 133)) * yMult)] = color;
	Result[int2((xPos + 67)) * xMult), (yPos - 135)) * yMult)] = color;
	Result[int2((xPos + 68)) * xMult), (yPos - 135)) * yMult)] = color;
	Result[int2((xPos + 69)) * xMult), (yPos - 135)) * yMult)] = color;
	Result[int2((xPos + 67)) * xMult), (yPos - 136)) * yMult)] = color;
	Result[int2((xPos + 68)) * xMult), (yPos - 137)) * yMult)] = color;
	Result[int2((xPos + 110)) * xMult), (yPos - 172)) * yMult)] = color;
	Result[int2((xPos + 111)) * xMult), (yPos - 172)) * yMult)] = color;
	Result[int2((xPos + 109)) * xMult), (yPos - 173)) * yMult)] = color;
	Result[int2((xPos + 110)) * xMult), (yPos - 173)) * yMult)] = color;
	Result[int2((xPos + 111)) * xMult), (yPos - 174)) * yMult)] = color;
}