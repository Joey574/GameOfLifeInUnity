#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 2)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 50)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 50)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 51)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 52)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 52)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 55)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 56)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 56)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 55)) * xMult), (yPos - 29)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 60)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 49)) * xMult), (yPos - 57)) * yMult)] = color;
	Result[int2((xPos + 50)) * xMult), (yPos - 57)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 58)) * yMult)] = color;
	Result[int2((xPos + 50)) * xMult), (yPos - 58)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 59)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 60)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 60)) * yMult)] = color;
}