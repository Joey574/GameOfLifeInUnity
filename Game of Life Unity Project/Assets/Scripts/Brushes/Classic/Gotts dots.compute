#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2(xPos, yPos)] = color;
	Result[int2(xPos, yPos - (1 * yMult))] = color;
	Result[int2(xPos, yPos - (2 * yMult))] = color;
	Result[int2(xPos + (4 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos + (8 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos + (5 * xMult), yPos - (12 * yMult))] = color;
	Result[int2(xPos + (7 * xMult), yPos - (12 * yMult))] = color;
	Result[int2(xPos + (6 * xMult), yPos - (13 * yMult))] = color;
	Result[int2(xPos + (9 * xMult), yPos - (13 * yMult))] = color;
	Result[int2(xPos + (9 * xMult), yPos - (14 * yMult))] = color;
	Result[int2(xPos + (9 * xMult), yPos - (15 * yMult))] = color;
	Result[int2(xPos + (185 * xMult), yPos - (24 * yMult))] = color;
	Result[int2(xPos + (186 * xMult), yPos - (25 * yMult))] = color;
	Result[int2(xPos + (182 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (186 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (183 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (184 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (185 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (186 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (179 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (180 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos + (181 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos + (179 * xMult), yPos - (30 * yMult))] = color;
	Result[int2(xPos + (183 * xMult), yPos - (31 * yMult))] = color;
	Result[int2(xPos + (184 * xMult), yPos - (31 * yMult))] = color;
	Result[int2(xPos + (185 * xMult), yPos - (31 * yMult))] = color;
	Result[int2(xPos + (186 * xMult), yPos - (31 * yMult))] = color;
	Result[int2(xPos + (182 * xMult), yPos - (32 * yMult))] = color;
	Result[int2(xPos + (186 * xMult), yPos - (32 * yMult))] = color;
	Result[int2(xPos + (186 * xMult), yPos - (33 * yMult))] = color;
	Result[int2(xPos + (185 * xMult), yPos - (34 * yMult))] = color;
	Result[int2(xPos + (175 * xMult), yPos - (35 * yMult))] = color;
	Result[int2(xPos + (176 * xMult), yPos - (36 * yMult))] = color;
	Result[int2(xPos + (170 * xMult), yPos - (37 * yMult))] = color;
	Result[int2(xPos + (176 * xMult), yPos - (37 * yMult))] = color;
	Result[int2(xPos + (171 * xMult), yPos - (38 * yMult))] = color;
	Result[int2(xPos + (172 * xMult), yPos - (38 * yMult))] = color;
	Result[int2(xPos + (173 * xMult), yPos - (38 * yMult))] = color;
	Result[int2(xPos + (174 * xMult), yPos - (38 * yMult))] = color;
	Result[int2(xPos + (175 * xMult), yPos - (38 * yMult))] = color;
	Result[int2(xPos + (176 * xMult), yPos - (38 * yMult))] = color;
}