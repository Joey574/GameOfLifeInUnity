#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2(xPos + (84 * xMult), yPos)] = color;
	Result[int2(xPos + (85 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (86 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (2 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (84 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (85 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos, yPos - (3 * yMult))] = color;
	Result[int2(xPos + (2 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (4 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (44 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (46 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (88 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (2 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (4 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (6 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (45 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (46 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (87 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (4 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (5 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (45 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (87 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (88 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (89 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (24 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (25 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (27 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (28 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (43 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (44 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (64 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (65 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (67 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (68 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (104 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (105 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (107 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (108 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (8 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (9 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (25 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (27 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (43 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (45 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (65 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (67 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (105 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (107 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (8 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (10 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (25 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (27 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (43 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (48 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (49 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (50 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (65 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (67 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (105 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (107 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (8 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (26 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (48 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (66 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (106 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (49 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos + (88 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos + (87 * xMult), yPos - (12 * yMult))] = color;
	Result[int2(xPos + (88 * xMult), yPos - (12 * yMult))] = color;
	Result[int2(xPos + (87 * xMult), yPos - (13 * yMult))] = color;
	Result[int2(xPos + (89 * xMult), yPos - (13 * yMult))] = color;
	Result[int2(xPos + (84 * xMult), yPos - (15 * yMult))] = color;
	Result[int2(xPos + (85 * xMult), yPos - (15 * yMult))] = color;
	Result[int2(xPos + (86 * xMult), yPos - (15 * yMult))] = color;
	Result[int2(xPos + (86 * xMult), yPos - (16 * yMult))] = color;
	Result[int2(xPos + (85 * xMult), yPos - (17 * yMult))] = color;
}