#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 15366)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 15366)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 15364)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 15365)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 15363)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 15363)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 15363)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 15363)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 15393)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 15392)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 15393)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 15390)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 15393)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 15390)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 15392)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 15391)) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos + 15568)) * xMult), (yPos - 150)) * yMult)] = color;
	Result[int2((xPos + 15569)) * xMult), (yPos - 150)) * yMult)] = color;
	Result[int2((xPos + 15569)) * xMult), (yPos - 151)) * yMult)] = color;
	Result[int2((xPos + 15570)) * xMult), (yPos - 151)) * yMult)] = color;
	Result[int2((xPos + 15569)) * xMult), (yPos - 152)) * yMult)] = color;
	Result[int2((xPos + 15554)) * xMult), (yPos - 181)) * yMult)] = color;
	Result[int2((xPos + 15553)) * xMult), (yPos - 182)) * yMult)] = color;
	Result[int2((xPos + 15555)) * xMult), (yPos - 182)) * yMult)] = color;
	Result[int2((xPos + 15555)) * xMult), (yPos - 183)) * yMult)] = color;
	Result[int2((xPos + 15556)) * xMult), (yPos - 184)) * yMult)] = color;
	Result[int2((xPos + 59722)) * xMult), (yPos - 691)) * yMult)] = color;
	Result[int2((xPos + 59723)) * xMult), (yPos - 691)) * yMult)] = color;
	Result[int2((xPos + 59721)) * xMult), (yPos - 692)) * yMult)] = color;
	Result[int2((xPos + 59722)) * xMult), (yPos - 692)) * yMult)] = color;
	Result[int2((xPos + 59722)) * xMult), (yPos - 693)) * yMult)] = color;
	Result[int2((xPos + 59737)) * xMult), (yPos - 722)) * yMult)] = color;
	Result[int2((xPos + 59736)) * xMult), (yPos - 723)) * yMult)] = color;
	Result[int2((xPos + 59738)) * xMult), (yPos - 723)) * yMult)] = color;
	Result[int2((xPos + 59736)) * xMult), (yPos - 724)) * yMult)] = color;
	Result[int2((xPos + 59735)) * xMult), (yPos - 725)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 14632)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 14632)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 14633)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 14633)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 14634)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 14634)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 14635)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 14636)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 14657)) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos - 14658)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 14659)) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos - 14660)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 14661)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 14662)) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos - 14662)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 14662)) * yMult)] = color;
}