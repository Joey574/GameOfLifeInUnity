#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 1660)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 1661)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 1662)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 1663)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 1659)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 1663)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 1663)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 1662)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 1790)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 1791)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 1792)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 1793)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 1789)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 1793)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 1793)) * xMult), (yPos - 34)) * yMult)] = color;
	Result[int2((xPos + 1792)) * xMult), (yPos - 35)) * yMult)] = color;
	Result[int2((xPos + 1790)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 1791)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 1791)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 1790)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 1791)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 1789)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 1790)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 1791)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 1792)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 1793)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 1789)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 1793)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 1793)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 1792)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 107)) * xMult), (yPos - 331)) * yMult)] = color;
	Result[int2((xPos + 109)) * xMult), (yPos - 331)) * yMult)] = color;
	Result[int2((xPos + 110)) * xMult), (yPos - 331)) * yMult)] = color;
	Result[int2((xPos + 111)) * xMult), (yPos - 331)) * yMult)] = color;
	Result[int2((xPos + 108)) * xMult), (yPos - 332)) * yMult)] = color;
	Result[int2((xPos + 109)) * xMult), (yPos - 332)) * yMult)] = color;
	Result[int2((xPos + 110)) * xMult), (yPos - 332)) * yMult)] = color;
	Result[int2((xPos + 111)) * xMult), (yPos - 332)) * yMult)] = color;
	Result[int2((xPos + 107)) * xMult), (yPos - 333)) * yMult)] = color;
	Result[int2((xPos + 112)) * xMult), (yPos - 334)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 365)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 365)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 365)) * yMult)] = color;
	Result[int2((xPos + 98)) * xMult), (yPos - 365)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 366)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 366)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 366)) * yMult)] = color;
	Result[int2((xPos + 98)) * xMult), (yPos - 366)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 367)) * yMult)] = color;
	Result[int2((xPos + 99)) * xMult), (yPos - 368)) * yMult)] = color;
	Result[int2((xPos + 98)) * xMult), (yPos - 381)) * yMult)] = color;
	Result[int2((xPos + 99)) * xMult), (yPos - 382)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 383)) * yMult)] = color;
	Result[int2((xPos + 99)) * xMult), (yPos - 383)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 384)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 384)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 384)) * yMult)] = color;
	Result[int2((xPos + 98)) * xMult), (yPos - 384)) * yMult)] = color;
	Result[int2((xPos + 99)) * xMult), (yPos - 384)) * yMult)] = color;
	Result[int2((xPos + 201)) * xMult), (yPos - 390)) * yMult)] = color;
	Result[int2((xPos + 202)) * xMult), (yPos - 390)) * yMult)] = color;
	Result[int2((xPos + 203)) * xMult), (yPos - 390)) * yMult)] = color;
	Result[int2((xPos + 204)) * xMult), (yPos - 390)) * yMult)] = color;
	Result[int2((xPos + 205)) * xMult), (yPos - 390)) * yMult)] = color;
	Result[int2((xPos + 206)) * xMult), (yPos - 390)) * yMult)] = color;
	Result[int2((xPos + 133)) * xMult), (yPos - 391)) * yMult)] = color;
	Result[int2((xPos + 134)) * xMult), (yPos - 391)) * yMult)] = color;
	Result[int2((xPos + 135)) * xMult), (yPos - 391)) * yMult)] = color;
	Result[int2((xPos + 136)) * xMult), (yPos - 391)) * yMult)] = color;
	Result[int2((xPos + 137)) * xMult), (yPos - 391)) * yMult)] = color;
	Result[int2((xPos + 202)) * xMult), (yPos - 391)) * yMult)] = color;
	Result[int2((xPos + 203)) * xMult), (yPos - 391)) * yMult)] = color;
	Result[int2((xPos + 204)) * xMult), (yPos - 391)) * yMult)] = color;
	Result[int2((xPos + 132)) * xMult), (yPos - 392)) * yMult)] = color;
	Result[int2((xPos + 137)) * xMult), (yPos - 392)) * yMult)] = color;
	Result[int2((xPos + 205)) * xMult), (yPos - 392)) * yMult)] = color;
	Result[int2((xPos + 137)) * xMult), (yPos - 393)) * yMult)] = color;
	Result[int2((xPos + 136)) * xMult), (yPos - 394)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 397)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 397)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 397)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 397)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 397)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 398)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 398)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 399)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 400)) * yMult)] = color;
	Result[int2((xPos + 183)) * xMult), (yPos - 407)) * yMult)] = color;
	Result[int2((xPos + 178)) * xMult), (yPos - 408)) * yMult)] = color;
	Result[int2((xPos + 179)) * xMult), (yPos - 409)) * yMult)] = color;
	Result[int2((xPos + 180)) * xMult), (yPos - 409)) * yMult)] = color;
	Result[int2((xPos + 181)) * xMult), (yPos - 409)) * yMult)] = color;
	Result[int2((xPos + 182)) * xMult), (yPos - 409)) * yMult)] = color;
	Result[int2((xPos + 178)) * xMult), (yPos - 410)) * yMult)] = color;
	Result[int2((xPos + 180)) * xMult), (yPos - 410)) * yMult)] = color;
	Result[int2((xPos + 181)) * xMult), (yPos - 410)) * yMult)] = color;
	Result[int2((xPos + 182)) * xMult), (yPos - 410)) * yMult)] = color;
}