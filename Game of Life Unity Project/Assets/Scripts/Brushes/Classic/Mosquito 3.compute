#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 2620)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 2621)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 2622)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 2623)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 2619)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 2623)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 2623)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 2622)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 2750)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 2751)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 2752)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 2753)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 2749)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 2753)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 2753)) * xMult), (yPos - 34)) * yMult)] = color;
	Result[int2((xPos + 2752)) * xMult), (yPos - 35)) * yMult)] = color;
	Result[int2((xPos + 2750)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 2751)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 2751)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 2750)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 2751)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 2749)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 2750)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 2751)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 2752)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 2753)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 2749)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 2753)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 2753)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 2752)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 405)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 405)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 405)) * yMult)] = color;
	Result[int2((xPos + 98)) * xMult), (yPos - 405)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 406)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 406)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 406)) * yMult)] = color;
	Result[int2((xPos + 98)) * xMult), (yPos - 406)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 407)) * yMult)] = color;
	Result[int2((xPos + 99)) * xMult), (yPos - 408)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 437)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 437)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 437)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 437)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 438)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 438)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 439)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 440)) * yMult)] = color;
	Result[int2((xPos + 621)) * xMult), (yPos - 570)) * yMult)] = color;
	Result[int2((xPos + 622)) * xMult), (yPos - 570)) * yMult)] = color;
	Result[int2((xPos + 623)) * xMult), (yPos - 570)) * yMult)] = color;
	Result[int2((xPos + 624)) * xMult), (yPos - 570)) * yMult)] = color;
	Result[int2((xPos + 625)) * xMult), (yPos - 570)) * yMult)] = color;
	Result[int2((xPos + 626)) * xMult), (yPos - 570)) * yMult)] = color;
	Result[int2((xPos + 622)) * xMult), (yPos - 571)) * yMult)] = color;
	Result[int2((xPos + 623)) * xMult), (yPos - 571)) * yMult)] = color;
	Result[int2((xPos + 624)) * xMult), (yPos - 571)) * yMult)] = color;
	Result[int2((xPos + 625)) * xMult), (yPos - 572)) * yMult)] = color;
	Result[int2((xPos + 308)) * xMult), (yPos - 631)) * yMult)] = color;
	Result[int2((xPos + 309)) * xMult), (yPos - 632)) * yMult)] = color;
	Result[int2((xPos + 304)) * xMult), (yPos - 633)) * yMult)] = color;
	Result[int2((xPos + 309)) * xMult), (yPos - 633)) * yMult)] = color;
	Result[int2((xPos + 305)) * xMult), (yPos - 634)) * yMult)] = color;
	Result[int2((xPos + 306)) * xMult), (yPos - 634)) * yMult)] = color;
	Result[int2((xPos + 307)) * xMult), (yPos - 634)) * yMult)] = color;
	Result[int2((xPos + 308)) * xMult), (yPos - 634)) * yMult)] = color;
	Result[int2((xPos + 309)) * xMult), (yPos - 634)) * yMult)] = color;
	Result[int2((xPos + 278)) * xMult), (yPos - 646)) * yMult)] = color;
	Result[int2((xPos + 279)) * xMult), (yPos - 646)) * yMult)] = color;
	Result[int2((xPos + 280)) * xMult), (yPos - 646)) * yMult)] = color;
	Result[int2((xPos + 281)) * xMult), (yPos - 646)) * yMult)] = color;
	Result[int2((xPos + 277)) * xMult), (yPos - 647)) * yMult)] = color;
	Result[int2((xPos + 281)) * xMult), (yPos - 647)) * yMult)] = color;
	Result[int2((xPos + 281)) * xMult), (yPos - 648)) * yMult)] = color;
	Result[int2((xPos + 280)) * xMult), (yPos - 649)) * yMult)] = color;
}