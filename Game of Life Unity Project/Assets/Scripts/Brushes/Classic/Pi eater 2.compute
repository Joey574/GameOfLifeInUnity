#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2(xPos, yPos)] = color;
	Result[int2(xPos + (1 * xMult), yPos)] = color;
	Result[int2(xPos + (21 * xMult), yPos)] = color;
	Result[int2(xPos + (22 * xMult), yPos)] = color;
	Result[int2(xPos + (1 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (10 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (11 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (12 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (21 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (3 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (10 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (12 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (19 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (21 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (2 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (3 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (10 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (12 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (19 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (20 * xMult), yPos - (3 * yMult))] = color;
}