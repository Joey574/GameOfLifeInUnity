#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 79)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 77)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 79)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 78)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 79)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 102)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 103)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 78)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 79)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 101)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 104)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 77)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 79)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 101)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 104)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 79)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 102)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 103)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 34)) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos - 34)) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos - 35)) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos - 35)) * yMult)] = color;
}