#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2(xPos + (133 * xMult), yPos)] = color;
	Result[int2(xPos + (134 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (130 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (134 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (131 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (132 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (133 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (134 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (130 * xMult), yPos - (6 * yMult))] = color;
	Result[int2(xPos + (131 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (132 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (132 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (131 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (132 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (133 * xMult), yPos - (14 * yMult))] = color;
	Result[int2(xPos + (134 * xMult), yPos - (15 * yMult))] = color;
	Result[int2(xPos + (130 * xMult), yPos - (16 * yMult))] = color;
	Result[int2(xPos + (134 * xMult), yPos - (16 * yMult))] = color;
	Result[int2(xPos + (131 * xMult), yPos - (17 * yMult))] = color;
	Result[int2(xPos + (132 * xMult), yPos - (17 * yMult))] = color;
	Result[int2(xPos + (133 * xMult), yPos - (17 * yMult))] = color;
	Result[int2(xPos + (134 * xMult), yPos - (17 * yMult))] = color;
	Result[int2(xPos + (96 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (97 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (93 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (97 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (94 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos + (95 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos + (96 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos + (97 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos + (3 * xMult), yPos - (37 * yMult))] = color;
	Result[int2(xPos + (4 * xMult), yPos - (38 * yMult))] = color;
	Result[int2(xPos, yPos - (39 * yMult))] = color;
	Result[int2(xPos + (4 * xMult), yPos - (39 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (40 * yMult))] = color;
	Result[int2(xPos + (2 * xMult), yPos - (40 * yMult))] = color;
	Result[int2(xPos + (3 * xMult), yPos - (40 * yMult))] = color;
	Result[int2(xPos + (4 * xMult), yPos - (40 * yMult))] = color;
}