#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2(xPos + (7 * xMult), yPos)] = color;
	Result[int2(xPos + (8 * xMult), yPos)] = color;
	Result[int2(xPos + (10 * xMult), yPos)] = color;
	Result[int2(xPos + (13 * xMult), yPos)] = color;
	Result[int2(xPos + (15 * xMult), yPos)] = color;
	Result[int2(xPos + (16 * xMult), yPos)] = color;
	Result[int2(xPos, yPos - (1 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (6 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (9 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (14 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (17 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (22 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (23 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos, yPos - (2 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (7 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (9 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (14 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (16 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (22 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (23 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (8 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (15 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (8 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (15 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos, yPos - (10 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (7 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (9 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (14 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (16 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (22 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (23 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos, yPos - (11 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos + (6 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos + (9 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos + (14 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos + (17 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos + (22 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos + (23 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos + (7 * xMult), yPos - (12 * yMult))] = color;
	Result[int2(xPos + (8 * xMult), yPos - (12 * yMult))] = color;
	Result[int2(xPos + (10 * xMult), yPos - (12 * yMult))] = color;
	Result[int2(xPos + (13 * xMult), yPos - (12 * yMult))] = color;
	Result[int2(xPos + (15 * xMult), yPos - (12 * yMult))] = color;
	Result[int2(xPos + (16 * xMult), yPos - (12 * yMult))] = color;
	Result[int2(xPos + (11 * xMult), yPos - (20 * yMult))] = color;
	Result[int2(xPos + (12 * xMult), yPos - (20 * yMult))] = color;
	Result[int2(xPos + (13 * xMult), yPos - (20 * yMult))] = color;
	Result[int2(xPos + (12 * xMult), yPos - (21 * yMult))] = color;
	Result[int2(xPos + (11 * xMult), yPos - (23 * yMult))] = color;
	Result[int2(xPos + (12 * xMult), yPos - (23 * yMult))] = color;
	Result[int2(xPos + (13 * xMult), yPos - (23 * yMult))] = color;
	Result[int2(xPos + (10 * xMult), yPos - (24 * yMult))] = color;
	Result[int2(xPos + (14 * xMult), yPos - (24 * yMult))] = color;
	Result[int2(xPos + (9 * xMult), yPos - (25 * yMult))] = color;
	Result[int2(xPos + (15 * xMult), yPos - (25 * yMult))] = color;
	Result[int2(xPos + (9 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (11 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (13 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (15 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (8 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (9 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (11 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (13 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (15 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (16 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (7 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (10 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (11 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (13 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (14 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (17 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (7 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos + (8 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos + (16 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos + (17 * xMult), yPos - (29 * yMult))] = color;
}