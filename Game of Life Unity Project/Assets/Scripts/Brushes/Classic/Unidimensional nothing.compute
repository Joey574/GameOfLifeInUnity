#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 110)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 111)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 112)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 113)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 115)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 116)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 117)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 118)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 120)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 121)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 122)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 123)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 124)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 126)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 127)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 128)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 129)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 130)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 131)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 132)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 134)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 135)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 136)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 138)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 139)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 140)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 141)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 143)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 144)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 145)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 146)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 147)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 148)) * xMult), (yPos) * yMult)] = color;
}