#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 63)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 55)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 55)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 29)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 30)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 30)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 30)) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 45)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 45)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 45)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 53)) * yMult)] = color;
}