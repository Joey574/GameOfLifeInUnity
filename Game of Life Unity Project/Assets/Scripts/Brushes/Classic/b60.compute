#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 57)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 56)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 56)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 57)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 58)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 50)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 49)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 50)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 49)) * xMult), (yPos - 45)) * yMult)] = color;
	Result[int2((xPos + 51)) * xMult), (yPos - 45)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 57)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 56)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 57)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 56)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 58)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 54)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 55)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 55)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 55)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 56)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 57)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 63)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 64)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 66)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 66)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 83)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 83)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 84)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 84)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 84)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 84)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 89)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 89)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 89)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 90)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 91)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 93)) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos - 94)) * yMult)] = color;
}