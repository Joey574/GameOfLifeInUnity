#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2(xPos + (75 * xMult), yPos)] = color;
	Result[int2(xPos + (76 * xMult), yPos)] = color;
	Result[int2(xPos + (78 * xMult), yPos)] = color;
	Result[int2(xPos + (79 * xMult), yPos)] = color;
	Result[int2(xPos + (76 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (78 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (71 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (72 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (74 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (80 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (82 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (83 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (70 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (72 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (74 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (75 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (79 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (80 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (82 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (84 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (69 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (76 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (78 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (85 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (69 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (70 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (71 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (72 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (73 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (74 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (75 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (79 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (80 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (81 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (82 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (83 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (84 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (85 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (71 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (72 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (73 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (81 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (82 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (83 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (13 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (70 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (73 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (77 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (81 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (84 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (12 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (14 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (70 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (71 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (76 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (78 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (83 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (84 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (12 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (14 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (76 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (78 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (13 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos + (77 * xMult), yPos - (11 * yMult))] = color;
	Result[int2(xPos, yPos - (24 * yMult))] = color;
	Result[int2(xPos + (64 * xMult), yPos - (24 * yMult))] = color;
	Result[int2(xPos, yPos - (25 * yMult))] = color;
	Result[int2(xPos + (2 * xMult), yPos - (25 * yMult))] = color;
	Result[int2(xPos + (64 * xMult), yPos - (25 * yMult))] = color;
	Result[int2(xPos + (66 * xMult), yPos - (25 * yMult))] = color;
	Result[int2(xPos, yPos - (26 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (2 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (64 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (65 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (66 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (2 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (66 * xMult), yPos - (27 * yMult))] = color;
}