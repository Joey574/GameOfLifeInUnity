#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 5)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 49)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 113)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 49)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 56)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 57)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 58)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 72)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 88)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 89)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 90)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 104)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 105)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 106)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 113)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 120)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 121)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 122)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 49)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 113)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 8)) * yMult)] = color;
}