#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 115)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 116)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 164)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 198)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 114)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 115)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 116)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 163)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 199)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 85)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 163)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 164)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 165)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 197)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 198)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 199)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 85)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 87)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 155)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 207)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 85)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 86)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 153)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 155)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 207)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 209)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 154)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 155)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 207)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 208)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 76)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 76)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 85)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 122)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 123)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 125)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 162)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 163)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 165)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 202)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 203)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 205)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 84)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 85)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 114)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 115)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 122)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 124)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 125)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 162)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 164)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 165)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 202)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 204)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 205)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos + 113)) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos + 115)) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 115)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 21)) * yMult)] = color;
}