#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2(xPos + (34 * xMult), yPos)] = color;
	Result[int2(xPos + (36 * xMult), yPos)] = color;
	Result[int2(xPos + (37 * xMult), yPos)] = color;
	Result[int2(xPos + (34 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (35 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos + (37 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos, yPos - (3 * yMult))] = color;
	Result[int2(xPos + (32 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (33 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (34 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (35 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (36 * xMult), yPos - (3 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (2 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (31 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (34 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos + (37 * xMult), yPos - (4 * yMult))] = color;
	Result[int2(xPos, yPos - (5 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (31 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (32 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (36 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (38 * xMult), yPos - (5 * yMult))] = color;
	Result[int2(xPos + (37 * xMult), yPos - (6 * yMult))] = color;
	Result[int2(xPos + (38 * xMult), yPos - (6 * yMult))] = color;
	Result[int2(xPos + (38 * xMult), yPos - (12 * yMult))] = color;
	Result[int2(xPos + (37 * xMult), yPos - (13 * yMult))] = color;
	Result[int2(xPos + (38 * xMult), yPos - (13 * yMult))] = color;
	Result[int2(xPos + (39 * xMult), yPos - (13 * yMult))] = color;
	Result[int2(xPos + (39 * xMult), yPos - (14 * yMult))] = color;
	Result[int2(xPos + (40 * xMult), yPos - (14 * yMult))] = color;
	Result[int2(xPos + (50 * xMult), yPos - (22 * yMult))] = color;
	Result[int2(xPos + (51 * xMult), yPos - (22 * yMult))] = color;
	Result[int2(xPos + (37 * xMult), yPos - (23 * yMult))] = color;
	Result[int2(xPos + (39 * xMult), yPos - (23 * yMult))] = color;
	Result[int2(xPos + (50 * xMult), yPos - (23 * yMult))] = color;
	Result[int2(xPos + (51 * xMult), yPos - (23 * yMult))] = color;
	Result[int2(xPos + (38 * xMult), yPos - (24 * yMult))] = color;
	Result[int2(xPos + (39 * xMult), yPos - (24 * yMult))] = color;
	Result[int2(xPos + (38 * xMult), yPos - (25 * yMult))] = color;
	Result[int2(xPos + (38 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (37 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (39 * xMult), yPos - (28 * yMult))] = color;
	Result[int2(xPos + (38 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos + (39 * xMult), yPos - (29 * yMult))] = color;
	Result[int2(xPos + (26 * xMult), yPos - (38 * yMult))] = color;
	Result[int2(xPos + (27 * xMult), yPos - (38 * yMult))] = color;
	Result[int2(xPos + (25 * xMult), yPos - (39 * yMult))] = color;
	Result[int2(xPos + (27 * xMult), yPos - (39 * yMult))] = color;
	Result[int2(xPos + (25 * xMult), yPos - (40 * yMult))] = color;
	Result[int2(xPos + (24 * xMult), yPos - (41 * yMult))] = color;
	Result[int2(xPos + (25 * xMult), yPos - (41 * yMult))] = color;
}