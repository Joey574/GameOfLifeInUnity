#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 47)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 58)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 58)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 59)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 59)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 59)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 59)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 60)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 60)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 63)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 63)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 71)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 71)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 94)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 95)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 95)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 96)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 96)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 99)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 99)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 100)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 100)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 100)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 100)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 100)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 100)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 101)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 101)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 101)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 101)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 101)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 101)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 101)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 101)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 101)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 102)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 102)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 102)) * yMult)] = color;
	Result[int2((xPos + 51)) * xMult), (yPos - 102)) * yMult)] = color;
	Result[int2((xPos + 52)) * xMult), (yPos - 102)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 102)) * yMult)] = color;
	Result[int2((xPos + 55)) * xMult), (yPos - 102)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 102)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 103)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 107)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 108)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 108)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 108)) * yMult)] = color;
	Result[int2((xPos + 51)) * xMult), (yPos - 108)) * yMult)] = color;
	Result[int2((xPos + 52)) * xMult), (yPos - 108)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 108)) * yMult)] = color;
	Result[int2((xPos + 55)) * xMult), (yPos - 108)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 108)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 110)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 110)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 110)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 110)) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 110)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 110)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 111)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 111)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 112)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 114)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 114)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 115)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 115)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 116)) * yMult)] = color;
}