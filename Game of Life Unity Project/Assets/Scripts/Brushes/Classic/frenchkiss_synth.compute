#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 55)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 55)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 56)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 52)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 33)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 34)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 34)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 35)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 52)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 41)) * yMult)] = color;
	Result[int2((xPos + 52)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 52)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 45)) * yMult)] = color;
}