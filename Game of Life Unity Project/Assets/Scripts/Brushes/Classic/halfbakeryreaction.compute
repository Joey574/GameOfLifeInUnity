#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 66)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 66)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 67)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 40)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 54)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 54)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 56)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 56)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 57)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 57)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 58)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 58)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 59)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 59)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 59)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 60)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 60)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 64)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 64)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 65)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 65)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 66)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 66)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 70)) * yMult)] = color;
}