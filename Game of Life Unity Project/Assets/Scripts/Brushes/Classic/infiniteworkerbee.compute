#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	Result[int2(xPos, yPos)] = color;
	Result[int2(xPos + 1, yPos)] = color;
	Result[int2(xPos + 2, yPos)] = color;
	Result[int2(xPos + 3, yPos)] = color;
	Result[int2(xPos + 4, yPos)] = color;
	Result[int2(xPos + 5, yPos)] = color;
	Result[int2(xPos + 8, yPos)] = color;
	Result[int2(xPos + 9, yPos)] = color;
	Result[int2(xPos + 10, yPos)] = color;
	Result[int2(xPos + 11, yPos)] = color;
	Result[int2(xPos + 12, yPos)] = color;
	Result[int2(xPos + 13, yPos)] = color;
	Result[int2(xPos + 16, yPos)] = color;
	Result[int2(xPos + 17, yPos)] = color;
	Result[int2(xPos + 18, yPos)] = color;
	Result[int2(xPos + 19, yPos)] = color;
	Result[int2(xPos + 20, yPos)] = color;
	Result[int2(xPos + 21, yPos)] = color;
	Result[int2(xPos + 24, yPos)] = color;
	Result[int2(xPos + 25, yPos)] = color;
	Result[int2(xPos + 26, yPos)] = color;
	Result[int2(xPos + 27, yPos)] = color;
	Result[int2(xPos + 28, yPos)] = color;
	Result[int2(xPos + 29, yPos)] = color;
	Result[int2(xPos + 32, yPos)] = color;
	Result[int2(xPos + 33, yPos)] = color;
	Result[int2(xPos + 34, yPos)] = color;
	Result[int2(xPos + 35, yPos)] = color;
	Result[int2(xPos + 36, yPos)] = color;
	Result[int2(xPos + 37, yPos)] = color;
	Result[int2(xPos + 40, yPos)] = color;
	Result[int2(xPos + 41, yPos)] = color;
	Result[int2(xPos + 42, yPos)] = color;
	Result[int2(xPos + 43, yPos)] = color;
	Result[int2(xPos + 44, yPos)] = color;
	Result[int2(xPos + 45, yPos)] = color;
	Result[int2(xPos + 48, yPos)] = color;
	Result[int2(xPos + 49, yPos)] = color;
	Result[int2(xPos + 50, yPos)] = color;
	Result[int2(xPos + 51, yPos)] = color;
	Result[int2(xPos + 52, yPos)] = color;
	Result[int2(xPos + 53, yPos)] = color;
	Result[int2(xPos + 56, yPos)] = color;
	Result[int2(xPos + 57, yPos)] = color;
	Result[int2(xPos + 58, yPos)] = color;
	Result[int2(xPos + 59, yPos)] = color;
	Result[int2(xPos + 60, yPos)] = color;
	Result[int2(xPos + 61, yPos)] = color;
	Result[int2(xPos + 64, yPos)] = color;
	Result[int2(xPos + 65, yPos)] = color;
	Result[int2(xPos + 66, yPos)] = color;
	Result[int2(xPos + 67, yPos)] = color;
	Result[int2(xPos + 68, yPos)] = color;
	Result[int2(xPos + 69, yPos)] = color;
	Result[int2(xPos + 72, yPos)] = color;
	Result[int2(xPos + 73, yPos)] = color;
	Result[int2(xPos + 74, yPos)] = color;
	Result[int2(xPos + 75, yPos)] = color;
	Result[int2(xPos + 76, yPos)] = color;
	Result[int2(xPos + 77, yPos)] = color;
	Result[int2(xPos + 80, yPos)] = color;
	Result[int2(xPos + 81, yPos)] = color;
	Result[int2(xPos + 82, yPos)] = color;
	Result[int2(xPos + 83, yPos)] = color;
	Result[int2(xPos + 84, yPos)] = color;
	Result[int2(xPos + 85, yPos)] = color;
	Result[int2(xPos + 88, yPos)] = color;
	Result[int2(xPos + 89, yPos)] = color;
	Result[int2(xPos + 90, yPos)] = color;
	Result[int2(xPos + 91, yPos)] = color;
	Result[int2(xPos + 92, yPos)] = color;
	Result[int2(xPos + 93, yPos)] = color;
	Result[int2(xPos + 96, yPos)] = color;
	Result[int2(xPos + 97, yPos)] = color;
	Result[int2(xPos + 98, yPos)] = color;
	Result[int2(xPos + 99, yPos)] = color;
	Result[int2(xPos + 100, yPos)] = color;
	Result[int2(xPos + 101, yPos)] = color;
	Result[int2(xPos + 104, yPos)] = color;
	Result[int2(xPos + 105, yPos)] = color;
	Result[int2(xPos + 106, yPos)] = color;
	Result[int2(xPos + 107, yPos)] = color;
	Result[int2(xPos + 108, yPos)] = color;
	Result[int2(xPos + 109, yPos)] = color;
	Result[int2(xPos + 112, yPos)] = color;
	Result[int2(xPos + 113, yPos)] = color;
	Result[int2(xPos + 114, yPos)] = color;
	Result[int2(xPos + 115, yPos)] = color;
	Result[int2(xPos + 116, yPos)] = color;
	Result[int2(xPos + 117, yPos)] = color;
	Result[int2(xPos + 120, yPos)] = color;
	Result[int2(xPos + 121, yPos)] = color;
	Result[int2(xPos + 122, yPos)] = color;
	Result[int2(xPos + 123, yPos)] = color;
	Result[int2(xPos + 124, yPos)] = color;
	Result[int2(xPos + 125, yPos)] = color;
}