#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 49)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 49)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 36)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 36)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 39)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos - 42)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 43)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos - 44)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 46)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 58)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 58)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 59)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 59)) * yMult)] = color;
}