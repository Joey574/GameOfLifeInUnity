#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2(xPos + (1 * xMult), yPos)] = color;
	Result[int2(xPos + (2 * xMult), yPos - (1 * yMult))] = color;
	Result[int2(xPos, yPos - (2 * yMult))] = color;
	Result[int2(xPos + (1 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (2 * xMult), yPos - (2 * yMult))] = color;
	Result[int2(xPos + (20 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (22 * xMult), yPos - (7 * yMult))] = color;
	Result[int2(xPos + (21 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (22 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (48 * xMult), yPos - (8 * yMult))] = color;
	Result[int2(xPos + (21 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (48 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (50 * xMult), yPos - (9 * yMult))] = color;
	Result[int2(xPos + (48 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (49 * xMult), yPos - (10 * yMult))] = color;
	Result[int2(xPos + (26 * xMult), yPos - (20 * yMult))] = color;
	Result[int2(xPos + (24 * xMult), yPos - (21 * yMult))] = color;
	Result[int2(xPos + (26 * xMult), yPos - (21 * yMult))] = color;
	Result[int2(xPos + (25 * xMult), yPos - (22 * yMult))] = color;
	Result[int2(xPos + (26 * xMult), yPos - (22 * yMult))] = color;
	Result[int2(xPos + (28 * xMult), yPos - (25 * yMult))] = color;
	Result[int2(xPos + (33 * xMult), yPos - (25 * yMult))] = color;
	Result[int2(xPos + (29 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (31 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (32 * xMult), yPos - (26 * yMult))] = color;
	Result[int2(xPos + (27 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (28 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (29 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (32 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (33 * xMult), yPos - (27 * yMult))] = color;
	Result[int2(xPos + (11 * xMult), yPos - (32 * yMult))] = color;
	Result[int2(xPos + (12 * xMult), yPos - (32 * yMult))] = color;
	Result[int2(xPos + (12 * xMult), yPos - (33 * yMult))] = color;
	Result[int2(xPos + (13 * xMult), yPos - (33 * yMult))] = color;
	Result[int2(xPos + (11 * xMult), yPos - (34 * yMult))] = color;
	Result[int2(xPos + (55 * xMult), yPos - (61 * yMult))] = color;
	Result[int2(xPos + (56 * xMult), yPos - (61 * yMult))] = color;
	Result[int2(xPos + (57 * xMult), yPos - (61 * yMult))] = color;
	Result[int2(xPos + (55 * xMult), yPos - (62 * yMult))] = color;
	Result[int2(xPos + (56 * xMult), yPos - (63 * yMult))] = color;
	Result[int2(xPos + (88 * xMult), yPos - (87 * yMult))] = color;
	Result[int2(xPos + (89 * xMult), yPos - (87 * yMult))] = color;
	Result[int2(xPos + (90 * xMult), yPos - (87 * yMult))] = color;
	Result[int2(xPos + (88 * xMult), yPos - (88 * yMult))] = color;
	Result[int2(xPos + (89 * xMult), yPos - (89 * yMult))] = color;
}