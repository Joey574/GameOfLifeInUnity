#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 11)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 31)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 31)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 32)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 36)) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos - 36)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 36)) * yMult)] = color;
	Result[int2((xPos + 28)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 37)) * yMult)] = color;
}