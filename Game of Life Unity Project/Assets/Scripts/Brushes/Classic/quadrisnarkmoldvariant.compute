#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 36)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 37)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 38)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 49)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 50)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 48)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 49)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 60)) * xMult), (yPos - 60)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 61)) * yMult)] = color;
	Result[int2((xPos + 60)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 62)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 84)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos + 84)) * xMult), (yPos - 70)) * yMult)] = color;
	Result[int2((xPos + 85)) * xMult), (yPos - 71)) * yMult)] = color;
	Result[int2((xPos + 72)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 84)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 73)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 73)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 73)) * yMult)] = color;
	Result[int2((xPos + 72)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 91)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 92)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 91)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 78)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 79)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 84)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 78)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 79)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 90)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 91)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 77)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 78)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 80)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 84)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 86)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 87)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 90)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 91)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 78)) * xMult), (yPos - 81)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 81)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 81)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 81)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 81)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 81)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 78)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 84)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 90)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 91)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 92)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 83)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 83)) * yMult)] = color;
	Result[int2((xPos + 90)) * xMult), (yPos - 83)) * yMult)] = color;
	Result[int2((xPos + 94)) * xMult), (yPos - 83)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 83)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 84)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 84)) * yMult)] = color;
	Result[int2((xPos + 92)) * xMult), (yPos - 84)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 84)) * yMult)] = color;
	Result[int2((xPos + 72)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 79)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 93)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 79)) * xMult), (yPos - 86)) * yMult)] = color;
	Result[int2((xPos + 81)) * xMult), (yPos - 86)) * yMult)] = color;
	Result[int2((xPos + 91)) * xMult), (yPos - 86)) * yMult)] = color;
	Result[int2((xPos + 91)) * xMult), (yPos - 87)) * yMult)] = color;
	Result[int2((xPos + 92)) * xMult), (yPos - 87)) * yMult)] = color;
}