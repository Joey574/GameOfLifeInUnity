#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 8)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 28)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 29)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 29)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 47)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 48)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 49)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 54)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 54)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 55)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 55)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 56)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 56)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 69)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 76)) * yMult)] = color;
}