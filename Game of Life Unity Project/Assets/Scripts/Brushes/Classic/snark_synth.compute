#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 21)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 131)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 130)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 130)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 131)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 132)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 109)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 108)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 108)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 109)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 110)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 16)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 17)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 128)) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos + 126)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 127)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 127)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 128)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 50)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 55)) * xMult), (yPos - 51)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 52)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 54)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 54)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 53)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 52)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 54)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 76)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 83)) * xMult), (yPos - 77)) * yMult)] = color;
	Result[int2((xPos + 82)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 84)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 65)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 66)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 81)) * yMult)] = color;
	Result[int2((xPos + 64)) * xMult), (yPos - 81)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 82)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 83)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 83)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 99)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 99)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 100)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 100)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 100)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 100)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 100)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 101)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 101)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 102)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 106)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 106)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 106)) * yMult)] = color;
	Result[int2((xPos + 10)) * xMult), (yPos - 107)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 108)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 110)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 111)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 124)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 124)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 125)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 125)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 126)) * yMult)] = color;
	Result[int2((xPos + 127)) * xMult), (yPos - 127)) * yMult)] = color;
	Result[int2((xPos + 128)) * xMult), (yPos - 127)) * yMult)] = color;
	Result[int2((xPos + 129)) * xMult), (yPos - 127)) * yMult)] = color;
	Result[int2((xPos + 127)) * xMult), (yPos - 128)) * yMult)] = color;
	Result[int2((xPos + 128)) * xMult), (yPos - 129)) * yMult)] = color;
}