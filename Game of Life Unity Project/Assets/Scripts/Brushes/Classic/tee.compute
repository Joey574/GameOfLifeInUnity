#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 35)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 36)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos - 4)) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos - 5)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 26)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 27)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 28)) * yMult)] = color;
}