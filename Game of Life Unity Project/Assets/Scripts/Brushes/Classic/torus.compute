#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 11)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 11)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 12)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 54)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 54)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 55)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 56)) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos - 57)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 57)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 72)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 73)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 73)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 98)) * xMult), (yPos - 74)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 98)) * xMult), (yPos - 75)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 78)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 79)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 80)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 81)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 81)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 85)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 86)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 86)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 87)) * yMult)] = color;
	Result[int2((xPos + 98)) * xMult), (yPos - 87)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 88)) * yMult)] = color;
	Result[int2((xPos + 98)) * xMult), (yPos - 88)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 91)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 91)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 93)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 93)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 94)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 94)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 96)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 96)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 96)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 96)) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos - 97)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 97)) * yMult)] = color;
	Result[int2((xPos + 19)) * xMult), (yPos - 97)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 97)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 97)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 97)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 97)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 97)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 20)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 35)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos - 98)) * yMult)] = color;
}