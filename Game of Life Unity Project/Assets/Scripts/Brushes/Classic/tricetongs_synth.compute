#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 23)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 24)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 25)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 53)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 54)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 54)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 55)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 55)) * yMult)] = color;
	Result[int2((xPos + 110)) * xMult), (yPos - 65)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 66)) * yMult)] = color;
	Result[int2((xPos + 109)) * xMult), (yPos - 66)) * yMult)] = color;
	Result[int2((xPos + 61)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 109)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 110)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 111)) * xMult), (yPos - 67)) * yMult)] = color;
	Result[int2((xPos + 62)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 63)) * xMult), (yPos - 68)) * yMult)] = color;
	Result[int2((xPos + 126)) * xMult), (yPos - 86)) * yMult)] = color;
	Result[int2((xPos + 124)) * xMult), (yPos - 87)) * yMult)] = color;
	Result[int2((xPos + 125)) * xMult), (yPos - 87)) * yMult)] = color;
	Result[int2((xPos + 126)) * xMult), (yPos - 87)) * yMult)] = color;
	Result[int2((xPos + 123)) * xMult), (yPos - 88)) * yMult)] = color;
	Result[int2((xPos + 127)) * xMult), (yPos - 88)) * yMult)] = color;
	Result[int2((xPos + 128)) * xMult), (yPos - 88)) * yMult)] = color;
	Result[int2((xPos + 123)) * xMult), (yPos - 89)) * yMult)] = color;
	Result[int2((xPos + 124)) * xMult), (yPos - 89)) * yMult)] = color;
	Result[int2((xPos + 125)) * xMult), (yPos - 89)) * yMult)] = color;
	Result[int2((xPos + 127)) * xMult), (yPos - 89)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 90)) * yMult)] = color;
	Result[int2((xPos + 124)) * xMult), (yPos - 90)) * yMult)] = color;
	Result[int2((xPos + 125)) * xMult), (yPos - 90)) * yMult)] = color;
	Result[int2((xPos + 127)) * xMult), (yPos - 90)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 91)) * yMult)] = color;
	Result[int2((xPos + 122)) * xMult), (yPos - 91)) * yMult)] = color;
	Result[int2((xPos + 125)) * xMult), (yPos - 91)) * yMult)] = color;
	Result[int2((xPos + 126)) * xMult), (yPos - 91)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 122)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 123)) * xMult), (yPos - 92)) * yMult)] = color;
	Result[int2((xPos + 102)) * xMult), (yPos - 97)) * yMult)] = color;
	Result[int2((xPos + 102)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 104)) * xMult), (yPos - 98)) * yMult)] = color;
	Result[int2((xPos + 102)) * xMult), (yPos - 99)) * yMult)] = color;
	Result[int2((xPos + 103)) * xMult), (yPos - 99)) * yMult)] = color;
	Result[int2((xPos + 100)) * xMult), (yPos - 106)) * yMult)] = color;
	Result[int2((xPos + 99)) * xMult), (yPos - 107)) * yMult)] = color;
	Result[int2((xPos + 99)) * xMult), (yPos - 108)) * yMult)] = color;
	Result[int2((xPos + 100)) * xMult), (yPos - 108)) * yMult)] = color;
	Result[int2((xPos + 101)) * xMult), (yPos - 108)) * yMult)] = color;
	Result[int2((xPos + 95)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 109)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 110)) * yMult)] = color;
	Result[int2((xPos + 97)) * xMult), (yPos - 110)) * yMult)] = color;
	Result[int2((xPos + 96)) * xMult), (yPos - 111)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 136)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 136)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 136)) * yMult)] = color;
	Result[int2((xPos + 75)) * xMult), (yPos - 137)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 138)) * yMult)] = color;
}