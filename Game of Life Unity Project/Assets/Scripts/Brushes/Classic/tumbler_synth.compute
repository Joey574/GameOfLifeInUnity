#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos + 37)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 1)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 2)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 3)) * yMult)] = color;
	Result[int2((xPos + 57)) * xMult), (yPos - 6)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 57)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 59)) * xMult), (yPos - 7)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 57)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 58)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 72)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 8)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 44)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 69)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 70)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 9)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 70)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 71)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 72)) * xMult), (yPos - 10)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 11)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 70)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 71)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 72)) * xMult), (yPos - 12)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 69)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 70)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 74)) * xMult), (yPos - 13)) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 27)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 72)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos + 73)) * xMult), (yPos - 14)) * yMult)] = color;
	Result[int2((xPos) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos - 15)) * yMult)] = color;
	Result[int2((xPos + 58)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 59)) * xMult), (yPos - 18)) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos + 58)) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos + 60)) * xMult), (yPos - 19)) * yMult)] = color;
	Result[int2((xPos + 3)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 58)) * xMult), (yPos - 20)) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 21)) * yMult)] = color;
	Result[int2((xPos + 37)) * xMult), (yPos - 22)) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos - 22)) * yMult)] = color;
}