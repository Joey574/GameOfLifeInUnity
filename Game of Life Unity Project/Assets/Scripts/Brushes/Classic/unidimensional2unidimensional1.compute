#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2((xPos) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 1)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 2)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 4)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 5)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 6)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 7)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 8)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 9)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 13)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 14)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 15)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 16)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 17)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 18)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 21)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 22)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 23)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 24)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 25)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 26)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 29)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 30)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 31)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 32)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 33)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 34)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 38)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 39)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 40)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 41)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 42)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 43)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 45)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 46)) * xMult), (yPos) * yMult)] = color;
	Result[int2((xPos + 47)) * xMult), (yPos) * yMult)] = color;
}