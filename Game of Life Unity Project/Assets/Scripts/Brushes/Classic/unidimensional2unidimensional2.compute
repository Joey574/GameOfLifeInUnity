#pragma kernel CSMain

RWTexture2D<float4> Result;

float xPos;
float yPos;

float4 color;

bool lr;
bool ud;

[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float xMult = 1;
    float yMult = 1;
	
    if (lr)
    {
        xMult = -1;
    }
	
    if (ud)
    {
        yMult = -1;
    }

	Result[int2(xPos, yPos)] = color;
	Result[int2(xPos + (1 * xMult), yPos)] = color;
	Result[int2(xPos + (2 * xMult), yPos)] = color;
	Result[int2(xPos + (3 * xMult), yPos)] = color;
	Result[int2(xPos + (4 * xMult), yPos)] = color;
	Result[int2(xPos + (5 * xMult), yPos)] = color;
	Result[int2(xPos + (6 * xMult), yPos)] = color;
	Result[int2(xPos + (7 * xMult), yPos)] = color;
	Result[int2(xPos + (8 * xMult), yPos)] = color;
	Result[int2(xPos + (9 * xMult), yPos)] = color;
	Result[int2(xPos + (10 * xMult), yPos)] = color;
	Result[int2(xPos + (12 * xMult), yPos)] = color;
	Result[int2(xPos + (13 * xMult), yPos)] = color;
	Result[int2(xPos + (14 * xMult), yPos)] = color;
	Result[int2(xPos + (15 * xMult), yPos)] = color;
	Result[int2(xPos + (18 * xMult), yPos)] = color;
	Result[int2(xPos + (19 * xMult), yPos)] = color;
	Result[int2(xPos + (20 * xMult), yPos)] = color;
	Result[int2(xPos + (21 * xMult), yPos)] = color;
	Result[int2(xPos + (23 * xMult), yPos)] = color;
	Result[int2(xPos + (24 * xMult), yPos)] = color;
	Result[int2(xPos + (25 * xMult), yPos)] = color;
	Result[int2(xPos + (32 * xMult), yPos)] = color;
	Result[int2(xPos + (33 * xMult), yPos)] = color;
	Result[int2(xPos + (34 * xMult), yPos)] = color;
	Result[int2(xPos + (35 * xMult), yPos)] = color;
	Result[int2(xPos + (36 * xMult), yPos)] = color;
	Result[int2(xPos + (37 * xMult), yPos)] = color;
	Result[int2(xPos + (39 * xMult), yPos)] = color;
	Result[int2(xPos + (40 * xMult), yPos)] = color;
	Result[int2(xPos + (41 * xMult), yPos)] = color;
	Result[int2(xPos + (44 * xMult), yPos)] = color;
	Result[int2(xPos + (45 * xMult), yPos)] = color;
	Result[int2(xPos + (46 * xMult), yPos)] = color;
	Result[int2(xPos + (47 * xMult), yPos)] = color;
	Result[int2(xPos + (48 * xMult), yPos)] = color;
	Result[int2(xPos + (49 * xMult), yPos)] = color;
	Result[int2(xPos + (50 * xMult), yPos)] = color;
	Result[int2(xPos + (51 * xMult), yPos)] = color;
	Result[int2(xPos + (52 * xMult), yPos)] = color;
	Result[int2(xPos + (54 * xMult), yPos)] = color;
	Result[int2(xPos + (55 * xMult), yPos)] = color;
	Result[int2(xPos + (56 * xMult), yPos)] = color;
	Result[int2(xPos + (58 * xMult), yPos)] = color;
	Result[int2(xPos + (59 * xMult), yPos)] = color;
	Result[int2(xPos + (60 * xMult), yPos)] = color;
	Result[int2(xPos + (68 * xMult), yPos)] = color;
	Result[int2(xPos + (69 * xMult), yPos)] = color;
	Result[int2(xPos + (70 * xMult), yPos)] = color;
	Result[int2(xPos + (71 * xMult), yPos)] = color;
	Result[int2(xPos + (72 * xMult), yPos)] = color;
	Result[int2(xPos + (74 * xMult), yPos)] = color;
	Result[int2(xPos + (75 * xMult), yPos)] = color;
	Result[int2(xPos + (76 * xMult), yPos)] = color;
}