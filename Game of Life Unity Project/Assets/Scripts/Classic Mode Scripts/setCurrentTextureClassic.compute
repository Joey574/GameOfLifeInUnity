// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> PreResult;
RWTexture2D<float4> Result;

<<<<<<< Updated upstream
float rVal;
=======
//float4 color;
>>>>>>> Stashed changes

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float r = 0;
<<<<<<< Updated upstream

    r += PreResult[int2(id.x + 1, id.y + 1)].r / rVal;
    r += PreResult[int2(id.x + 1, id.y - 1)].r / rVal;
    r += PreResult[int2(id.x - 1, id.y + 1)].r / rVal;
    r += PreResult[int2(id.x - 1, id.y - 1)].r / rVal;
    r += PreResult[int2(id.x + 1, id.y)].r / rVal;
    r += PreResult[int2(id.x - 1, id.y)].r / rVal;
    r += PreResult[int2(id.x, id.y + 1)].r / rVal;
    r += PreResult[int2(id.x, id.y - 1)].r / rVal;

    //r += PreResult[int2(id.x + 1, id.y + 1)].r;
    //r += PreResult[int2(id.x + 1, id.y - 1)].r;
    //r += PreResult[int2(id.x - 1, id.y + 1)].r;
    //r += PreResult[int2(id.x - 1, id.y - 1)].r;
    //r += PreResult[int2(id.x + 1, id.y)].r;
    //r += PreResult[int2(id.x - 1, id.y)].r;
    //r += PreResult[int2(id.x, id.y + 1)].r;
    //r += PreResult[int2(id.x, id.y - 1)].r;
      
    switch ((int)r)
=======
    
    r += PreResult[int2(id.x + 1, id.y + 1)].r;
    r += PreResult[int2(id.x + 1, id.y - 1)].r;
    r += PreResult[int2(id.x - 1, id.y + 1)].r;
    r += PreResult[int2(id.x - 1, id.y - 1)].r;
    r += PreResult[int2(id.x + 1, id.y)].r;
    r += PreResult[int2(id.x - 1, id.y)].r;
    r += PreResult[int2(id.x, id.y + 1)].r;
    r += PreResult[int2(id.x, id.y - 1)].r;
    
    //if (r >= (1.5 * color.r) && color.r <= (2.5 * color.r))
    //{
    //    Result[id.xy] = PreResult[id.xy];           
    //}
    //else if (r >= (2.5 * color.r) && color.r <= (3.5 * color.r))
    //{
    //    Result[id.xy] = color;
    //}
    //else
    //{
    //    Result[id.xy] = float4(0, 0, 0, 1);
    //}
    
    switch ((int) r)
>>>>>>> Stashed changes
    {
        case 2:
            Result[id.xy] = PreResult[id.xy];
            break;
        case 3:
            Result[id.xy] = float4(0.5f, 1, 1, 1);
            break;
        default:
            Result[id.xy] = float4(0, 0, 0, 1);
            break;
    }
}
