#pragma kernel CSMain

RWTexture2D<float4> PreResult;
RWTexture2D<float4> Result;

float4 color;

static const int countA[9] = { 0, 0, 1, 0, 0, 0, 0, 0, 0 };
static const int countB[9] = { 0, 0, 0, 1, 0, 0, 0, 0, 0 };

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float r = 0;
    
    r += PreResult[int2(id.x + 1, id.y + 1)].r / color.r;
    r += PreResult[int2(id.x + 1, id.y - 1)].r / color.r;
    r += PreResult[int2(id.x - 1, id.y + 1)].r / color.r;
    r += PreResult[int2(id.x - 1, id.y - 1)].r / color.r;
    r += PreResult[int2(id.x + 1, id.y)].r / color.r;
    r += PreResult[int2(id.x - 1, id.y)].r / color.r;
    r += PreResult[int2(id.x, id.y + 1)].r / color.r;
    r += PreResult[int2(id.x, id.y - 1)].r / color.r;
    
    Result[id.xy] = ((PreResult[id.xy] * countA[int(r)]) + (color * countB[int(r)])) + float4(0, 0, 0, 1);        
        
    //switch ((int) r)
    //{
    //    case 2:
    //        Result[id.xy] = PreResult[id.xy];
    //        break;
    //    case 3:
    //        Result[id.xy] = color;
    //        break;
    //    default:
    //        Result[id.xy] = float4(0, 0, 0, 1);
    //        break;
    //}
}
