// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> PreResult;
RWTexture2D<float4> Result;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float r = 0;
    float g = 0;
    
    PreResult = Result;
    
    g += PreResult[int2(id.x + 1, id.y + 1)].g;
    g += PreResult[int2(id.x + 1, id.y - 1)].g;
    g += PreResult[int2(id.x - 1, id.y + 1)].g;
    g += PreResult[int2(id.x - 1, id.y - 1)].g;
    g += PreResult[int2(id.x + 1, id.y)].g;
    g += PreResult[int2(id.x - 1, id.y)].g;
    g += PreResult[int2(id.x, id.y + 1)].g;
    g += PreResult[int2(id.x, id.y - 1)].g;
    
    if (PreResult[id.xy].g > 0.5 && PreResult[id.xy].r < 0.5)
    {
        switch ((int) g)
        {
            case 2:
                Result[id.xy] = PreResult[id.xy];
                break;
            case 3:
                Result[id.xy] = PreResult[id.xy];
                break;
            default:
                Result[id.xy] = float4(0, 0, 0, 1);
                break;
        }
    }
    else if (PreResult[id.xy].r > 0.5)
    {
        r += PreResult[int2(id.x + 1, id.y + 1)].r;
        r += PreResult[int2(id.x + 1, id.y - 1)].r;
        r += PreResult[int2(id.x - 1, id.y + 1)].r;
        r += PreResult[int2(id.x - 1, id.y - 1)].r;
        r += PreResult[int2(id.x + 1, id.y)].r;
        r += PreResult[int2(id.x - 1, id.y)].r;
        r += PreResult[int2(id.x, id.y + 1)].r;
        r += PreResult[int2(id.x, id.y - 1)].r;
        
        switch ((int) r)
        {
            case 2:
                Result[id.xy] = PreResult[id.xy];
                break;
            case 3:
                Result[id.xy] = float4(1, 1, 1, 1);
                break;
            default:
                Result[id.xy] = float4(0, 0, 0, 1);
                break;
        }
        
        if ((int) g > (int) r)
        {
            Result[id.xy] = float4(0, 1, 0, 1);
        }

    }
    else
    {
        r += PreResult[int2(id.x + 1, id.y + 1)].r;
        r += PreResult[int2(id.x + 1, id.y - 1)].r;
        r += PreResult[int2(id.x - 1, id.y + 1)].r;
        r += PreResult[int2(id.x - 1, id.y - 1)].r;
        r += PreResult[int2(id.x + 1, id.y)].r;
        r += PreResult[int2(id.x - 1, id.y)].r;
        r += PreResult[int2(id.x, id.y + 1)].r;
        r += PreResult[int2(id.x, id.y - 1)].r;
        
        if ((int) g == 3 && (int) g > (int) r)
        {
            Result[id.xy] = float4(0, 1, 0, 1);
        }
        else
        {
            switch ((int) r)
            {
                case 2:
                    Result[id.xy] = PreResult[id.xy];
                    break;
                case 3:
                    Result[id.xy] = float4(1, 1, 1, 1);
                    break;
                default:
                    Result[id.xy] = float4(0, 0, 0, 1);
                    break;
            }
        }
    }
}