#pragma kernel CSMain

RWTexture2D<float4> PreResult;
RWTexture2D<float4> Result;

float4 color;

int scale; // 1024
int times; // 2

static const int countA[9] = { 0, 0, 1, 0, 0, 0, 0, 0, 0 };
static const int countB[9] = { 0, 0, 0, 1, 0, 0, 0, 0, 0 };


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float r;  
    
    for (int i = 0; i < times; i++)
    {
        r = 0;
        uint x = id.x + (i * scale);
        
        r += PreResult[int2(x + 1, id.y + 1)].r / color.r;
        r += PreResult[int2(x + 1, id.y - 1)].r / color.r;
        r += PreResult[int2(x - 1, id.y + 1)].r / color.r;
        r += PreResult[int2(x - 1, id.y - 1)].r / color.r;
        r += PreResult[int2(x + 1, id.y)].r / color.r;
        r += PreResult[int2(x - 1, id.y)].r / color.r;
        r += PreResult[int2(x, id.y + 1)].r / color.r;
        r += PreResult[int2(x, id.y - 1)].r / color.r;
        
        Result[int2(x, id.y)] = ((PreResult[int2(x, id.y)] * countA[int(r)]) + (color * countB[int(r)])) + float4(0, 0, 0, 1);
    }
    
    //switch ((int) r)
    //{
    //    case 2:
    //        Result[id.xy] = PreResult[id.xy];
    //        break;
    //    case 3:
    //        Result[id.xy] = color;
    //        break;
    //    default:
    //        Result[id.xy] = float4(0, 0, 0, 1);
    //        break;
    //}
}
